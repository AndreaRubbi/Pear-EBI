{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Phylogeny Embedding and Approximate Representation"},{"location":"index.html#goldman-group-european-bioinformatics-institute","title":"Goldman Group - European Bioinformatics Institute","text":"<p>PEAR can: 1. Compute the distance matrix given a set of phylogenetic trees; 2. Embed and represent the distance matrix in 2D or 3D.</p>"},{"location":"index.html#pear-usage","title":"PEAR usage","text":"<p>Pear is both a python software and library. It can be installed with <code>python -m pip install pear_ebi</code> or downloaded from Github. Pear is currently compatible with Linux and Mac OSs.</p>"},{"location":"index.html#pear-as-a-python-library","title":"PEAR as a python library","text":"<p>Once installed, Pear can be used to upload newick trees in python and represent them in embedded spaces. We recommend to use it on either jupyter notebook or lab, as these tools allow for more interaction with the graphs. On these platforms, the user is allowed to interact with widgets that allows to modify several parameteres of the plots. For specific uses and applications, see the examples.</p>"},{"location":"index.html#pear-as-a-program","title":"PEAR as a program","text":"<p>Run <code>python3 PEAR.py --help</code> to see the complete list of arguments and flags.</p>"},{"location":"index.html#simple-usage","title":"Simple usage","text":"<p><code>python3 PEAR.py examples_trees_sets/beast_trees/beast_run1.trees -hashrf -pca 3 -plot 2</code> this script calculates the unweighted Robison Foulds distances between the trees in the file \"beast_run1.trees\", which contains 1001 phylogenetic trees. The flag \"-hashrf\" defines the use of HasRF algorithm to perform this task. The flag \"-pca 3\" indicates to the program to perform a Principal Coordinate Analysis to embed the distance matrix in 3 dimensions, returning the final coordinates in the lower-dimensional space and plotting them 3D thanks to \"-plot 2\".</p>"},{"location":"index.html#config-file","title":"Config file","text":"<p>A standard config toml file can be used for specific emebddings of multiple sets of trees. Instances of toml files are reported in ##EXAMPLE FOLDER##....</p>"},{"location":"index.html#interactive-mode","title":"Interactive mode","text":"<p><code>python3 PEAR.py examples_trees_sets/beast_trees/beast_run1.trees --i</code> this script launches the program in interactive mode. Once the program starts, it is going to guide you through its usage thanks to an intuitive interface.</p>"},{"location":"index.html#licensing","title":"Licensing","text":"<p>This project is released under the terms of the MIT Open Source License. View LICENSE.txt for more information.</p>"},{"location":"pear_ebi/tree_emb_parser.html","title":"Tree emb parser","text":""},{"location":"pear_ebi/tree_emb_parser.html#parser","title":"parser","text":"<p>source <pre><code>.parser()\n</code></pre></p>"},{"location":"pear_ebi/tree_set.html","title":"Tree set","text":""},{"location":"pear_ebi/tree_set.html#tree_set","title":"tree_set","text":"<p>source <pre><code>tree_set(\n   file, output_file = None, distance_matrix = None, metadata = None\n)\n</code></pre></p> <p>Class for the analysis of a set of phylogenetic trees</p> <p>Methods:</p>"},{"location":"pear_ebi/tree_set.html#calculate_distances","title":".calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   method\n)\n</code></pre></p>"},{"location":"pear_ebi/tree_set.html#embed","title":".embed","text":"<p>source <pre><code>.embed(\n   method, dimensions, quality = False\n)\n</code></pre></p>"},{"location":"pear_ebi/tree_set.html#plot_2d","title":".plot_2D","text":"<p>source <pre><code>.plot_2D(\n   method, save = False, name_plot = None, static = False, plot_meta = 'SET-ID',\n   plot_set = None, select = False, same_scale = False\n)\n</code></pre></p>"},{"location":"pear_ebi/tree_set.html#plot_3d","title":".plot_3D","text":"<p>source <pre><code>.plot_3D(\n   method, save = False, name_plot = None, static = False, plot_meta = 'SET-ID',\n   plot_set = None, select = False, same_scale = False\n)\n</code></pre></p>"},{"location":"pear_ebi/tree_set.html#get_subset","title":".get_subset","text":"<p>source <pre><code>.get_subset(\n   n_required, method = 'sequence'\n)\n</code></pre></p>"},{"location":"pear_ebi/tree_set.html#set_collection","title":"set_collection","text":"<p>source <pre><code>set_collection(\n   collection = list(), file = 'Set_collection',\n   output_file = './Set_collection_distance_matrix', distance_matrix = None\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"pear_ebi/tree_set.html#concatenate","title":".concatenate","text":"<p>source <pre><code>.concatenate(\n   other\n)\n</code></pre></p>"},{"location":"pear_ebi/calculate_distances/hashrf.html","title":"Hashrf","text":""},{"location":"pear_ebi/calculate_distances/hashrf.html#bash_command","title":"bash_command","text":"<p>source <pre><code>.bash_command(\n   cmd\n)\n</code></pre></p>"},{"location":"pear_ebi/calculate_distances/hashrf.html#hashrf","title":"hashrf","text":"<p>source <pre><code>.hashrf(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>compute unweighted Robison Foulds distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"pear_ebi/calculate_distances/hashrf.html#hashrf_weighted","title":"hashrf_weighted","text":"<p>source <pre><code>.hashrf_weighted(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>compute weighted Robison Foulds distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"pear_ebi/calculate_distances/maple_RF.html","title":"maple RF","text":""},{"location":"pear_ebi/calculate_distances/maple_RF.html#tree","title":"Tree","text":"<p>source <pre><code>Tree(\n   name = '', children = None, dist = 3.3e-05\n)\n</code></pre></p> <p>Methods:</p>"},{"location":"pear_ebi/calculate_distances/maple_RF.html#add_child","title":".add_child","text":"<p>source <pre><code>.add_child(\n   node\n)\n</code></pre></p>"},{"location":"pear_ebi/calculate_distances/maple_RF.html#readnewick","title":"readNewick","text":"<p>source <pre><code>.readNewick(\n   tree_list, defaultBLen = 3.3e-05, normalizeInputBLen = 1.0\n)\n</code></pre></p> <p>From a list of strings defining phylogenetic trees in newick format, returns a list of Tree instances containing the biartitions of the tree in a modularized form, suitable for comparisons with other trees.</p> <p>Args</p> <ul> <li>tree_list (list) : list of trees in newick format.</li> <li>defaultBLen (float, optional) : default branch length. Defaults to 0.000033.</li> <li>normalizeInputBLen (float, optional) : value used to normalize branch lenghts. Defaults to 1.0.</li> </ul> <p>Returns</p> <ul> <li>trees  : list of Tree instances</li> </ul>"},{"location":"pear_ebi/calculate_distances/maple_RF.html#preparetreecomparison","title":"prepareTreeComparison","text":"<p>source <pre><code>.prepareTreeComparison(\n   t1, rooted = False, minimumBLen = 6e-06\n)\n</code></pre></p> <p>For every branch that is shared among two trees, add the absolute difference of the two branches to the RFL. (This is first stored seperately as the KL value first). For every branch that is only in either of the two trees, add the length to the RFL distance. For the tree that is 'prepared for comparison', usually the true tree, two hash tables are stored (python dictionaries), containing all branch lengths: - One contains all leaf-branches. These are indexed by the leaf's name,   usually a number (node.name). - The other contains all inner branches, indexed by the  values   of the subtree that is attached by the branch of interest. <p>Furthermore, it calculates the sum of all the inner branch lengths. Whenever in the second function of the Day's algorithm a branch is found in both trees, the absolute difference between the two branches is computed, and the result is the difference between that value and the difference with the branch length of the true tree. This calculation is not performed for leaf branches, as we can be sure that a leaf branch exists in both trees (if higher than the minimum length).</p> <p>Similar to the normal RF distance function, branches with length smaller than the minimum branch length are not taken into account. However, cases may occur that a branch exists in both trees, but in one of them it is lower than the minimum branch length, making the RFL less accurate.</p> <p>:param t1: input tree; :param rooted: set to True if t1 is rooted, default ro False; :param minimumBLen: minimum value for branch length, default to 6E-6;</p> <p>:return: tree metrics, among which the RFL.</p>"},{"location":"pear_ebi/calculate_distances/maple_RF.html#robinsonfouldswithday1985","title":"RobinsonFouldsWithDay1985","text":"<p>source <pre><code>.RobinsonFouldsWithDay1985(\n   t2, t1, rooted = False, minimumBLen = 6e-06\n)\n</code></pre></p>"},{"location":"pear_ebi/calculate_distances/maple_RF.html#calculate_distance_matrix","title":"calculate_distance_matrix","text":"<p>source <pre><code>.calculate_distance_matrix(\n   file, n_trees, output_file\n)\n</code></pre></p>"},{"location":"pear_ebi/calculate_distances/tqdist.html","title":"Tqdist","text":""},{"location":"pear_ebi/calculate_distances/tqdist.html#bash_command","title":"bash_command","text":"<p>source <pre><code>.bash_command(\n   cmd\n)\n</code></pre></p>"},{"location":"pear_ebi/calculate_distances/tqdist.html#quartet","title":"quartet","text":"<p>source <pre><code>.quartet(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>compute quartet distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"pear_ebi/calculate_distances/tqdist.html#triplet","title":"triplet","text":"<p>source <pre><code>.triplet(\n   file, n_trees, output_file\n)\n</code></pre></p> <p>compute triplet distances</p> <p>Args</p> <ul> <li>file (str) : name of input file with phylogenetic trees in newick format</li> <li>n_trees (int) : number of trees in file</li> <li>output_file (str) : name of output file that will contain the distance matrix</li> </ul> <p>Returns</p> <ul> <li>distance_matrix (pandas.DataFrame) : computed distance matrix</li> </ul>"},{"location":"pear_ebi/embeddings/PCA_e.html","title":"PCA e","text":""},{"location":"pear_ebi/embeddings/PCA_e.html#pca","title":"pca","text":"<p>source <pre><code>.pca(\n   distance_matrix, n_components, metadata = None, quality = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with Principal Coordinate Analysis</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_components (int) : number of desired components</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>components (numpy.array) : principal coordinates(components) of distance matrix</li> </ul>"},{"location":"pear_ebi/embeddings/pear_corr.html","title":"Pear corr","text":""},{"location":"pear_ebi/embeddings/pear_corr.html#euclidean_distance","title":"euclidean_distance","text":"<p>source <pre><code>.euclidean_distance(\n   distances\n)\n</code></pre></p>"},{"location":"pear_ebi/embeddings/pear_corr.html#pear_correlation","title":"pear_correlation","text":"<p>source <pre><code>.pear_correlation(\n   distance_matrix, embedding\n)\n</code></pre></p>"},{"location":"pear_ebi/embeddings/tSNE_e.html","title":"tSNE e","text":""},{"location":"pear_ebi/embeddings/tSNE_e.html#tsne","title":"tsne","text":"<p>source <pre><code>.tsne(\n   distance_matrix, n_dimensions, metadata = None, quality = False\n)\n</code></pre></p> <p>embed distance_matrix in n_components with t-Stochastic Neighbor Embedding</p> <p>Args</p> <ul> <li>distance_matrix (pandas.DataFrame) : distance_matrix</li> <li>n_dimensions (int) : number of desired dimensions</li> <li>metadata (pandas.DataFrame, optional) : metadata of elements. Defaults to None.</li> </ul> <p>Returns</p> <ul> <li>Distances_embedded_ND (numpy.array) : distances embedded in n_dimensions</li> </ul>"},{"location":"pear_ebi/embeddings/graph/graph.html","title":"Graph","text":""},{"location":"pear_ebi/embeddings/graph/graph.html#plot_embedding","title":"plot_embedding","text":"<p>source <pre><code>.plot_embedding(\n   data, metadata, dimensions, save = False, name_plot = 'Tree_embedding',\n   static = False, plot_meta = 'SET-ID', plot_set = None, select = False,\n   same_scale = False\n)\n</code></pre></p> <p>Plot embedding of distance matrix - in 2D or 3D</p> <p>Args</p> <ul> <li>data (pandas.DataFrame) : embedding of distance matrix</li> <li>metadata (pandas.DataFrame) : metadata of tree_set or set_collection</li> <li>dimensions (int) : number of dimensions - either 2 or 3</li> <li>save (bool, optional) : save plot in pdf format. Defaults to False.</li> <li>name_plot (str, optional) : name of plot. Defaults to 'Tree_embedding'.</li> <li>static (bool, optional) : if True, returns a less interactive format of plot. Defaults to False.</li> <li>plot_meta (str, optional) : defines the meta-feature used to color the points. Defaults to 'SET-ID'.</li> <li>plot_set (list or str, optional) : sets in set_collection to be plotted. Defaults to None.</li> <li>select (bool, optional) : if True, generates widgets that allow to show or hide uo to 16 set traces. Defaults to False.</li> </ul> <p>Returns</p> <ul> <li>image  : plot with related widgets - interactive or static format</li> </ul>"},{"location":"pear_ebi/interactive_mode/interactive.html","title":"Interactive","text":""},{"location":"pear_ebi/interactive_mode/interactive.html#usage","title":"usage","text":"<p>source <pre><code>.usage()\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#exit_program","title":"exit_program","text":"<p>source <pre><code>.exit_program()\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#calculate_distances","title":"calculate_distances","text":"<p>source <pre><code>.calculate_distances(\n   SET\n)\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#embedding","title":"embedding","text":"<p>source <pre><code>.embedding(\n   SET\n)\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#plotting","title":"plotting","text":"<p>source <pre><code>.plotting(\n   SET\n)\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#add_set","title":"add_set","text":"<p>source <pre><code>.add_set()\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#get_subset","title":"get_subset","text":"<p>source <pre><code>.get_subset(\n   SET\n)\n</code></pre></p>"},{"location":"pear_ebi/interactive_mode/interactive.html#interact","title":"interact","text":"<p>source <pre><code>.interact(\n   control\n)\n</code></pre></p>"},{"location":"pear_ebi/subsample/subsample.html","title":"Subsample","text":""},{"location":"pear_ebi/subsample/subsample.html#subsample","title":"subsample","text":"<p>source <pre><code>.subsample(\n   file, n_trees, n_required, subp = True\n)\n</code></pre></p> <p>subsample a set of trees considering their    distribution in the n_trees dimensional space.    It tries to maximize the distance between the    points in the sample considering the pairwise distance    with respect to the furthest points found at a certain step.    If the distance of a sample point P is not greater than    the one between MD1 &amp; MD2, then a random value is    retrieved from a uniform distribution {0,1}. If the    value is greater than 0.5, then the point is kept,    else discarded. This allows to sample also considering    the density of the points.</p> <p>Args</p> <ul> <li>file (str) : name of file containing the set of trees in newick format.</li> <li>n_trees (int) : number of trees in set.</li> <li>n_required (int) : number of trees in subsample.</li> </ul> <p>Returns</p> <ul> <li>points (list) : list of trees subsampled.</li> <li>idxs (list) : list of indexes of the trees subsampled.</li> </ul>"},{"location":"pear_ebi/subsample/subsample_multiprocess.html","title":"Subsample multiprocess","text":""},{"location":"pear_ebi/subsample/subsample_multiprocess.html#subsample","title":"subsample","text":"<p>source <pre><code>.subsample(\n   file, n_trees, n_required, subp = True\n)\n</code></pre></p> <p>subsample a set of trees considering their    distribution in the n_trees dimensional space.    It tries to maximize the distance between the    points in the sample considering the pairwise distance    with respect to the furthest points found at a certain step.    If the distance of a sample point P is not greater than    the one between MD1 &amp; MD2, then a random value is    retrieved from a uniform distribution {0,1}. If the    value is greater than 0.5, then the point is kept,    else discarded. This allows to sample also considering    the density of the points.</p> <p>Args</p> <ul> <li>file (str) : name of file containing the set of trees in newick format.</li> <li>n_trees (int) : number of trees in set.</li> <li>n_required (int) : number of trees in subsample.</li> </ul> <p>Returns</p> <ul> <li>points (list) : list of trees subsampled.</li> <li>idxs (list) : list of indexes of the trees subsampled.</li> </ul>"}]}
